// RUN: enzymexlamlir-opt --pass-pipeline="builtin.module(enzyme-hlo-generate-td{patterns=full_reduce_reshape_or_transpose},transform-interpreter,enzyme-hlo-remove-transform)" %s | FileCheck %s

module {
  // CHECK: func.func @loss_function
  func.func @loss_function(%arg0: tensor<3x32xf32>, %arg1: tensor<32xf32>, %arg2: tensor<32x32xf32>, %arg3: tensor<32xf32>, %arg4: tensor<32x32xf32>, %arg5: tensor<32xf32>, %arg6: tensor<32x1xf32>, %arg7: tensor<1xf32>, %arg8: tensor<128x3xf32>, %arg9: tensor<128x1xf32>, %arg10: tensor<128x3xf32>, %arg11: tensor<128x1xf32>) -> (tensor<f32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<3x32xf32>, tensor<32xf32>, tensor<32x32xf32>, tensor<32xf32>, tensor<32x32xf32>, tensor<32xf32>, tensor<32x1xf32>, tensor<1xf32>, tensor<128x3xf32>, tensor<128x1xf32>, tensor<128x3xf32>, tensor<128x1xf32>) {
    %cst = stablehlo.constant dense<"0xtensor<128x3xf32>
    %cst_0 = stablehlo.constant dense<"0xtensor<128x3xf32>
    %cst_1 = stablehlo.constant dense<1.000000e+00> : tensor<1x128xf32>
    %cst_2 = stablehlo.constant dense<1.000000e+00> : tensor<32x128xf32>
    %cst_3 = stablehlo.constant dense<1.280000e+02> : tensor<f32>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.reshape %arg9 : (tensor<128x1xf32>) -> tensor<1x128xf32>
    %1 = stablehlo.reshape %arg11 : (tensor<128x1xf32>) -> tensor<1x128xf32>
    %2 = stablehlo.reshape %arg6 : (tensor<32x1xf32>) -> tensor<1x32xf32>
    %3 = stablehlo.dot_general %arg0, %arg8, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<3x32xf32>, tensor<128x3xf32>) -> tensor<32x128xf32>
    %4 = stablehlo.broadcast_in_dim %arg1, dims = [0] : (tensor<32xf32>) -> tensor<32x128xf32>
    %5 = stablehlo.add %3, %4 : tensor<32x128xf32>
    %6 = stablehlo.tanh %5 : tensor<32x128xf32>
    %7 = stablehlo.dot_general %arg2, %6, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %8 = stablehlo.broadcast_in_dim %arg3, dims = [0] : (tensor<32xf32>) -> tensor<32x128xf32>
    %9 = stablehlo.add %7, %8 : tensor<32x128xf32>
    %10 = stablehlo.tanh %9 : tensor<32x128xf32>
    %11 = stablehlo.dot_general %arg4, %10, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %12 = stablehlo.broadcast_in_dim %arg5, dims = [0] : (tensor<32xf32>) -> tensor<32x128xf32>
    %13 = stablehlo.add %11, %12 : tensor<32x128xf32>
    %14 = stablehlo.tanh %13 : tensor<32x128xf32>
    %15 = stablehlo.dot_general %2, %cst_1, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x32xf32>, tensor<1x128xf32>) -> tensor<32x128xf32>
    %16 = stablehlo.multiply %14, %14 : tensor<32x128xf32>
    %17 = stablehlo.subtract %cst_2, %16 : tensor<32x128xf32>
    %18 = stablehlo.multiply %15, %17 : tensor<32x128xf32>
    %19 = stablehlo.dot_general %arg4, %18, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %20 = stablehlo.multiply %10, %10 : tensor<32x128xf32>
    %21 = stablehlo.subtract %cst_2, %20 : tensor<32x128xf32>
    %22 = stablehlo.multiply %19, %21 : tensor<32x128xf32>
    %23 = stablehlo.dot_general %arg2, %22, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %24 = stablehlo.multiply %6, %6 : tensor<32x128xf32>
    %25 = stablehlo.subtract %cst_2, %24 : tensor<32x128xf32>
    %26 = stablehlo.multiply %23, %25 : tensor<32x128xf32>
    %27 = stablehlo.slice %arg0 [2:3, 0:32] : (tensor<3x32xf32>) -> tensor<1x32xf32>
    %28 = stablehlo.dot_general %26, %27, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<32x128xf32>, tensor<1x32xf32>) -> tensor<128x1xf32>
    %29 = stablehlo.reshape %28 : (tensor<128x1xf32>) -> tensor<128xf32>
    %30 = stablehlo.dot_general %arg0, %cst_0, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<3x32xf32>, tensor<128x3xf32>) -> tensor<32x128xf32>
    %31 = stablehlo.multiply %30, %25 : tensor<32x128xf32>
    %32 = stablehlo.multiply %30, %23 : tensor<32x128xf32>
    %33 = stablehlo.negate %32 : tensor<32x128xf32>
    %34 = stablehlo.multiply %33, %6 : tensor<32x128xf32>
    %35 = stablehlo.add %34, %34 : tensor<32x128xf32>
    %36 = stablehlo.dot_general %arg2, %31, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %37 = stablehlo.multiply %36, %21 : tensor<32x128xf32>
    %38 = stablehlo.multiply %36, %19 : tensor<32x128xf32>
    %39 = stablehlo.negate %38 : tensor<32x128xf32>
    %40 = stablehlo.multiply %39, %10 : tensor<32x128xf32>
    %41 = stablehlo.add %40, %40 : tensor<32x128xf32>
    %42 = stablehlo.dot_general %arg4, %37, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %43 = stablehlo.multiply %42, %15 : tensor<32x128xf32>
    %44 = stablehlo.negate %43 : tensor<32x128xf32>
    %45 = stablehlo.multiply %44, %14 : tensor<32x128xf32>
    %46 = stablehlo.add %45, %45 : tensor<32x128xf32>
    %47 = stablehlo.multiply %46, %17 : tensor<32x128xf32>
    %48 = stablehlo.dot_general %arg4, %47, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %49 = stablehlo.add %41, %48 : tensor<32x128xf32>
    %50 = stablehlo.multiply %49, %21 : tensor<32x128xf32>
    %51 = stablehlo.dot_general %arg2, %50, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %52 = stablehlo.add %35, %51 : tensor<32x128xf32>
    %53 = stablehlo.multiply %52, %25 : tensor<32x128xf32>
    %54 = stablehlo.slice %arg0 [0:1, 0:32] : (tensor<3x32xf32>) -> tensor<1x32xf32>
    %55 = stablehlo.dot_general %53, %54, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<32x128xf32>, tensor<1x32xf32>) -> tensor<128x1xf32>
    %56 = stablehlo.reshape %55 : (tensor<128x1xf32>) -> tensor<128xf32>
    %57 = stablehlo.dot_general %arg0, %cst, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<3x32xf32>, tensor<128x3xf32>) -> tensor<32x128xf32>
    %58 = stablehlo.multiply %57, %25 : tensor<32x128xf32>
    %59 = stablehlo.multiply %57, %23 : tensor<32x128xf32>
    %60 = stablehlo.negate %59 : tensor<32x128xf32>
    %61 = stablehlo.multiply %60, %6 : tensor<32x128xf32>
    %62 = stablehlo.add %61, %61 : tensor<32x128xf32>
    %63 = stablehlo.dot_general %arg2, %58, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %64 = stablehlo.multiply %63, %21 : tensor<32x128xf32>
    %65 = stablehlo.multiply %63, %19 : tensor<32x128xf32>
    %66 = stablehlo.negate %65 : tensor<32x128xf32>
    %67 = stablehlo.multiply %66, %10 : tensor<32x128xf32>
    %68 = stablehlo.add %67, %67 : tensor<32x128xf32>
    %69 = stablehlo.dot_general %arg4, %64, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %70 = stablehlo.multiply %69, %15 : tensor<32x128xf32>
    %71 = stablehlo.negate %70 : tensor<32x128xf32>
    %72 = stablehlo.multiply %71, %14 : tensor<32x128xf32>
    %73 = stablehlo.add %72, %72 : tensor<32x128xf32>
    %74 = stablehlo.multiply %73, %17 : tensor<32x128xf32>
    %75 = stablehlo.dot_general %arg4, %74, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %76 = stablehlo.add %68, %75 : tensor<32x128xf32>
    %77 = stablehlo.multiply %76, %21 : tensor<32x128xf32>
    %78 = stablehlo.dot_general %arg2, %77, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %79 = stablehlo.add %62, %78 : tensor<32x128xf32>
    %80 = stablehlo.multiply %79, %25 : tensor<32x128xf32>
    %81 = stablehlo.slice %arg0 [1:2, 0:32] : (tensor<3x32xf32>) -> tensor<1x32xf32>
    %82 = stablehlo.dot_general %80, %81, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<32x128xf32>, tensor<1x32xf32>) -> tensor<128x1xf32>
    %83 = stablehlo.reshape %82 : (tensor<128x1xf32>) -> tensor<128xf32>
    %84 = stablehlo.subtract %29, %56 : tensor<128xf32>
    %85 = stablehlo.subtract %84, %83 : tensor<128xf32>
    %86 = stablehlo.multiply %85, %85 : tensor<128xf32>
    %87 = stablehlo.reduce(%86 init: %cst_4) applies stablehlo.add across dimensions = [0] : (tensor<128xf32>, tensor<f32>) -> tensor<f32>
    %88 = stablehlo.divide %87, %cst_3 : tensor<f32>
    %89 = stablehlo.dot_general %2, %14, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x32xf32>, tensor<32x128xf32>) -> tensor<1x128xf32>
    %90 = stablehlo.broadcast_in_dim %arg7, dims = [0] : (tensor<1xf32>) -> tensor<1x128xf32>
    %91 = stablehlo.add %89, %90 : tensor<1x128xf32>
    %92 = stablehlo.subtract %91, %0 : tensor<1x128xf32>
    %93 = stablehlo.multiply %92, %92 : tensor<1x128xf32>
    %94 = stablehlo.reduce(%93 init: %cst_4) applies stablehlo.add across dimensions = [0, 1] : (tensor<1x128xf32>, tensor<f32>) -> tensor<f32>
    %95 = stablehlo.divide %94, %cst_3 : tensor<f32>
    %96 = stablehlo.dot_general %arg0, %arg10, contracting_dims = [0] x [1], precision = [DEFAULT, DEFAULT] : (tensor<3x32xf32>, tensor<128x3xf32>) -> tensor<32x128xf32>
    %97 = stablehlo.add %96, %4 : tensor<32x128xf32>
    %98 = stablehlo.tanh %97 : tensor<32x128xf32>
    %99 = stablehlo.dot_general %arg2, %98, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %100 = stablehlo.add %99, %8 : tensor<32x128xf32>
    %101 = stablehlo.tanh %100 : tensor<32x128xf32>
    %102 = stablehlo.dot_general %arg4, %101, contracting_dims = [0] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x32xf32>, tensor<32x128xf32>) -> tensor<32x128xf32>
    %103 = stablehlo.add %102, %12 : tensor<32x128xf32>
    %104 = stablehlo.tanh %103 : tensor<32x128xf32>
    %105 = stablehlo.dot_general %2, %104, contracting_dims = [1] x [0], precision = [DEFAULT, DEFAULT] : (tensor<1x32xf32>, tensor<32x128xf32>) -> tensor<1x128xf32>
    %106 = stablehlo.add %105, %90 : tensor<1x128xf32>
    %107 = stablehlo.subtract %106, %1 : tensor<1x128xf32>
    %108 = stablehlo.multiply %107, %107 : tensor<1x128xf32>
    %109 = stablehlo.reduce(%108 init: %cst_4) applies stablehlo.add across dimensions = [0, 1] : (tensor<1x128xf32>, tensor<f32>) -> tensor<f32>
    %110 = stablehlo.divide %109, %cst_3 : tensor<f32>
    %111 = stablehlo.add %88, %95 : tensor<f32>
    %112 = stablehlo.add %111, %110 : tensor<f32>
    return %112, %88, %95, %110, %arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10, %arg11 : tensor<f32>, tensor<f32>, tensor<f32>, tensor<f32>, tensor<3x32xf32>, tensor<32xf32>, tensor<32x32xf32>, tensor<32xf32>, tensor<32x32xf32>, tensor<32xf32>, tensor<32x1xf32>, tensor<1xf32>, tensor<128x3xf32>, tensor<128x1xf32>, tensor<128x3xf32>, tensor<128x1xf32>
  }
}

