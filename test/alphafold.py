from test_utils import *
import functools
import jax
import jax.numpy as jnp
import jax.scipy.stats as stats
from absl.testing import absltest
import enzyme_ad
from enzyme_ad.jax import JaXPipeline, hlo_opts
from typing import Tuple
from absl.testing import absltest
from test_utils import *

pipelines = [
    # ("JaX", None, CurBackends),
    # ("DefOpt", JaXPipeline(hlo_opts()), CurBackends),
    (
        "EqSat",
        JaXPipeline(
            "inline{default-pipeline=canonicalize max-iterations=4},"
            + "equality-saturation-pass"
        ),
        CurBackends,
    ),
]

with open("test/exported_modules/alphafold.mlir") as f:
    code = f.read()

@jax.jit
def foo(args):
    return enzyme_ad.jax.primitives.hlo_call(
        *args,
        source=code
    )[0]

args = [jnp.ones((64), jnp.float32),
jnp.ones((128,64), jnp.float32),
jnp.ones((48,8,32), jnp.float32),
jnp.ones((48,256,8,32), jnp.float32),
jnp.ones((48,256,8,32), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,8,32,256), jnp.float32),
jnp.ones((48,256,8,32), jnp.float32),
jnp.ones((48,256,8,32), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,128,8), jnp.float32),
jnp.ones((48,8,32), jnp.float32),
jnp.ones((48,256,8,32), jnp.float32),
jnp.ones((48,256,8,32), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,8,32,256), jnp.float32),
jnp.ones((48,256,8,32), jnp.float32),
jnp.ones((48,256,8,32), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,1024), jnp.float32),
jnp.ones((48,256,1024), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,1024,256), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,32,32,128), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,256), jnp.float32),
jnp.ones((48,32), jnp.float32),
jnp.ones((48,256,32), jnp.float32),
jnp.ones((48,32), jnp.float32),
jnp.ones((48,256,32), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,512), jnp.float32),
jnp.ones((48,128,512), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,512,128), jnp.float32),
jnp.ones((48,128,4), jnp.float32),
jnp.ones((48,4,32), jnp.float32),
jnp.ones((48,128,4,32), jnp.float32),
jnp.ones((48,128,4,32), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,4,32,128), jnp.float32),
jnp.ones((48,128,4,32), jnp.float32),
jnp.ones((48,128,4,32), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,4), jnp.float32),
jnp.ones((48,4,32), jnp.float32),
jnp.ones((48,128,4,32), jnp.float32),
jnp.ones((48,128,4,32), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,4,32,128), jnp.float32),
jnp.ones((48,128,4,32), jnp.float32),
jnp.ones((48,128,4,32), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((48,128), jnp.float32),
jnp.ones((48,128,128), jnp.float32),
jnp.ones((64), jnp.float32),
jnp.ones((25,64), jnp.float32),
jnp.ones((4,8,8), jnp.float32),
jnp.ones((4,64,8,8), jnp.float32),
jnp.ones((4,64,8), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,8,8,64), jnp.float32),
jnp.ones((4,64,8,8), jnp.float32),
jnp.ones((4,64,8), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,128,8), jnp.float32),
jnp.ones((4,8,8), jnp.float32),
jnp.ones((4,64,8,8), jnp.float32),
jnp.ones((4,64,8,8), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,8,8,64), jnp.float32),
jnp.ones((4,64,8,8), jnp.float32),
jnp.ones((4,64,8,8), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,256), jnp.float32),
jnp.ones((4,64,256), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,256,64), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,32,32,128), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,64), jnp.float32),
jnp.ones((4,32), jnp.float32),
jnp.ones((4,64,32), jnp.float32),
jnp.ones((4,32), jnp.float32),
jnp.ones((4,64,32), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,512), jnp.float32),
jnp.ones((4,128,512), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,512,128), jnp.float32),
jnp.ones((4,128,4), jnp.float32),
jnp.ones((4,4,32), jnp.float32),
jnp.ones((4,128,4,32), jnp.float32),
jnp.ones((4,128,4,32), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,4,32,128), jnp.float32),
jnp.ones((4,128,4,32), jnp.float32),
jnp.ones((4,128,4,32), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,4), jnp.float32),
jnp.ones((4,4,32), jnp.float32),
jnp.ones((4,128,4,32), jnp.float32),
jnp.ones((4,128,4,32), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,4,32,128), jnp.float32),
jnp.ones((4,128,4,32), jnp.float32),
jnp.ones((4,128,4,32), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((4,128), jnp.float32),
jnp.ones((4,128,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((22,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((65,128), jnp.float32),
jnp.ones((256), jnp.float32),
jnp.ones((22,256), jnp.float32),
jnp.ones((256), jnp.float32),
jnp.ones((49,256), jnp.float32),
jnp.ones((256), jnp.float32),
jnp.ones((256), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((15,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((22,128), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((256,384), jnp.float32),
jnp.ones((64,4,16), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((4,16,128), jnp.float32),
jnp.ones((128,4,16), jnp.float32),
jnp.ones((64,4,16), jnp.float32),
jnp.ones((64), jnp.float32),
jnp.ones((88,64), jnp.float32),
jnp.ones((64), jnp.float32),
jnp.ones((64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,128), jnp.float32),
jnp.ones((2,64,128), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,128,64), jnp.float32),
jnp.ones((2,64,4), jnp.float32),
jnp.ones((2,4,16), jnp.float32),
jnp.ones((2,64,4,16), jnp.float32),
jnp.ones((2,64,4,16), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,4,16,64), jnp.float32),
jnp.ones((2,64,4,16), jnp.float32),
jnp.ones((2,64,4,16), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,4), jnp.float32),
jnp.ones((2,4,16), jnp.float32),
jnp.ones((2,64,4,16), jnp.float32),
jnp.ones((2,64,4,16), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,4,16,64), jnp.float32),
jnp.ones((2,64,4,16), jnp.float32),
jnp.ones((2,64,4,16), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((2,64), jnp.float32),
jnp.ones((2,64,64), jnp.float32),
jnp.ones((256), jnp.float32),
jnp.ones((256,256), jnp.float32),
jnp.ones((256), jnp.float32),
jnp.ones((57,256), jnp.float32),
jnp.ones((37), jnp.float32),
jnp.ones((384,37), jnp.float32),
jnp.ones((23), jnp.float32),
jnp.ones((256,23), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((384,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((128,128), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((50), jnp.float32),
jnp.ones((128,50), jnp.float32),
jnp.ones((6), jnp.float32),
jnp.ones((384,6), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((12), jnp.float32),
jnp.ones((12), jnp.float32),
jnp.ones((128,12), jnp.float32),
jnp.ones((432), jnp.float32),
jnp.ones((384,432), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384,384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((2112,384), jnp.float32),
jnp.ones((144), jnp.float32),
jnp.ones((384,144), jnp.float32),
jnp.ones((192), jnp.float32),
jnp.ones((384,192), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((384,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((384,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((128,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((128,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((128,128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((128,128), jnp.float32),
jnp.ones((14), jnp.float32),
jnp.ones((128,14), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384,384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384,384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384,384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384,384), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((128), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((384), jnp.float32),
jnp.ones((2), jnp.uint32),
jnp.ones((4,73), jnp.int32),
jnp.ones((4,73,14), jnp.float32),
jnp.ones((4,73,37), jnp.float32),
jnp.ones((4,508,73), jnp.float32),
jnp.ones((4,5120,73), jnp.float32),
jnp.ones((4,5120,73), jnp.float32),
jnp.ones((4,5120,73),jnp.int32),
jnp.ones((4,5120,73), jnp.float32),
jnp.ones((4,5120), jnp.float32),
jnp.ones((4), jnp.float32),
jnp.ones((4,508,73,49), jnp.float32),
jnp.ones((4,508,73), jnp.float32),
jnp.ones((4,508), jnp.float32),
jnp.ones((4,2), jnp.int32),
jnp.ones((4,73), jnp.int32),
jnp.ones((4,73,14), jnp.int32),
jnp.ones((4,73,37), jnp.int32),
jnp.ones((4), jnp.int32),
jnp.ones((4,73), jnp.float32),
jnp.ones((4,73,22), jnp.float32),
jnp.ones((4,4,73), jnp.int32),
jnp.ones((4,4,73,37), jnp.float32),
jnp.ones((4,4,73,37,3), jnp.float32),
jnp.ones((4,4), jnp.float32),
jnp.ones((4,4,73,3), jnp.float32),
jnp.ones((4,4,73), jnp.float32),
jnp.ones((4,4,1), jnp.float32),
jnp.ones((4,508,73), jnp.int32)]

output = foo(args)

class AlphaFold(EnzymeJaxTest):
    def setUp(self):
        import jax.numpy as jnp
        import jax.random

        self.fn = foo
        self.name = "alphafold"
        self.count = 10
        self.revprimal = False
        self.AllPipelines = pipelines
        self.AllBackends = CurBackends

        self.ins = args
        self.dins = args
        self.douts = [
            jnp.ones((63), jnp.float32),
            jnp.ones((73,73,64), jnp.float32),
            jnp.ones((73,37), jnp.float32),
            jnp.ones((508,73,23), jnp.float32),
            jnp.ones((73,50), jnp.float32),
            jnp.ones((73,37), jnp.float32),
            jnp.ones((73,37,3), jnp.float32)
        ]
        self.tol = 5e-5


if __name__ == "__main__":
    from test_utils import fix_paths

    fix_paths()
    absltest.main()
