diff '--color=auto' -ru a/xla/BUILD b/xla/BUILD
--- a/xla/BUILD	2023-06-12 20:50:10.000000000 +0000
+++ b/xla/BUILD	2023-07-11 09:42:42.089247113 +0000
@@ -13,7 +13,7 @@
 
 package(
     # copybara:uncomment default_applicable_licenses = ["//tensorflow:license"],
-    default_visibility = ["//xla:internal"],
+    default_visibility = ["//visibility:public"],
     licenses = ["notice"],
 )
 
diff '--color=auto' -ru a/xla/mlir/backends/cpu/transforms/legalize_i1_vector_transfers.cc b/xla/mlir/backends/cpu/transforms/legalize_i1_vector_transfers.cc
--- a/xla/mlir/backends/cpu/transforms/legalize_i1_vector_transfers.cc	2023-06-12 20:50:10.000000000 +0000
+++ b/xla/mlir/backends/cpu/transforms/legalize_i1_vector_transfers.cc	2023-07-10 15:50:07.787003636 +0000
@@ -89,7 +89,7 @@
         DenseElementsAttr::get(new_read.getType(), b.getI8IntegerAttr(0)));
     auto result =
         b.create<arith::CmpIOp>(arith::CmpIPredicate::ne, new_read, zero);
-    rewriter.replaceOp(op, {result});
+    rewriter.replaceOp(op, result);
     return success();
   };
 };
diff '--color=auto' -ru a/xla/mlir_hlo/mhlo/IR/hlo_ops.cc b/xla/mlir_hlo/mhlo/IR/hlo_ops.cc
--- a/xla/mlir_hlo/mhlo/IR/hlo_ops.cc	2023-06-12 20:50:10.000000000 +0000
+++ b/xla/mlir_hlo/mhlo/IR/hlo_ops.cc	2023-07-10 15:55:08.809414041 +0000
@@ -3005,7 +3005,7 @@
         rewriter.getI64TensorAttr(SmallVector<int64_t, 4>(inputRank, 1));
     auto result = rewriter.create<SliceOp>(loc, input, sliceStartIndices,
                                            sliceLimits, sliceStrides);
-    rewriter.replaceOp(dynamicSlice, {result});
+    rewriter.replaceOp(dynamicSlice, result);
     return success();
   }
 };
diff '--color=auto' -ru a/xla/mlir_hlo/mhlo/transforms/chlo_legalize_to_hlo/chlo_legalize_to_hlo.cc b/xla/mlir_hlo/mhlo/transforms/chlo_legalize_to_hlo/chlo_legalize_to_hlo.cc
--- a/xla/mlir_hlo/mhlo/transforms/chlo_legalize_to_hlo/chlo_legalize_to_hlo.cc	2023-06-12 20:50:10.000000000 +0000
+++ b/xla/mlir_hlo/mhlo/transforms/chlo_legalize_to_hlo/chlo_legalize_to_hlo.cc	2023-07-10 15:52:49.617201134 +0000
@@ -1797,8 +1797,8 @@
     }
 
     rewriter.replaceOp(op,
-                       {Adaptor::createOp(op, op.getResult().getType(),
-                                          adaptor.getOperands(), rewriter)});
+                       Adaptor::createOp(op, op.getResult().getType(),
+                                          adaptor.getOperands(), rewriter));
     return success();
   }
 };
diff '--color=auto' -ru a/xla/python/BUILD b/xla/python/BUILD
--- a/xla/python/BUILD	2023-06-12 20:50:10.000000000 +0000
+++ b/xla/python/BUILD	2023-07-11 09:44:12.489187435 +0000
@@ -21,7 +21,7 @@
 
 package(
     # copybara:uncomment default_applicable_licenses = ["//tensorflow:license"],
-    default_visibility = [":friends"],
+    default_visibility = ["//visibility:public"],
     licenses = ["notice"],
 )
 
@@ -70,7 +70,7 @@
     testonly = 1,
     srcs = ["xla_client_test.py"],
     srcs_version = "PY3",
-    visibility = [":friends"],
+    visibility = ["//visibility:public"],
     deps = [
         ":xla_client",
         "@absl_py//absl/flags",
@@ -205,7 +205,7 @@
         "-fno-strict-aliasing",
     ],
     features = ["-use_header_modules"],
-    visibility = [":friends"],
+    visibility = ["//visibility:public"],
     deps = [
         ":exceptions",
         "//xla:literal",
@@ -232,7 +232,7 @@
         "-fno-strict-aliasing",
     ],
     features = ["-use_header_modules"],
-    visibility = [":friends"],
+    visibility = ["//visibility:public"],
     deps = [
         "@com_google_absl//absl/base:core_headers",
         "@com_google_absl//absl/container:inlined_vector",
@@ -268,7 +268,7 @@
         "-fno-strict-aliasing",
     ],
     features = ["-use_header_modules"],
-    visibility = [":friends"],
+    visibility = ["//visibility:public"],
     deps = [
         ":exceptions",
         ":python_ref_manager",
@@ -435,7 +435,7 @@
         "-fno-strict-aliasing",
     ],
     features = ["-use_header_modules"],
-    visibility = [":friends"],  # For the functions to access C++ flags/thread-local variables
+    visibility = ["//visibility:public"],  # For the functions to access C++ flags/thread-local variables
     deps = [
         ":exceptions",
         ":py_client",
@@ -692,7 +692,7 @@
         "-fno-strict-aliasing",
     ],
     features = ["-use_header_modules"],
-    visibility = [":friends"],
+    visibility = ["//visibility:public"],
     deps = [
         ":exceptions",
         ":pytree_proto_cc",
@@ -801,7 +801,7 @@
         "-fno-strict-aliasing",
     ],
     features = ["-use_header_modules"],
-    visibility = [":friends"],
+    visibility = ["//visibility:public"],
     deps = [
         ":status_casters",
         "//xla:status",
diff '--color=auto' -ru a/xla/service/BUILD b/xla/service/BUILD
--- a/xla/service/BUILD	2023-06-12 20:50:10.000000000 +0000
+++ b/xla/service/BUILD	2023-07-10 15:36:23.550756903 +0000
@@ -33,7 +33,7 @@
 
 package(
     # copybara:uncomment default_applicable_licenses = ["//tensorflow:license"],
-    default_visibility = [":friends"],
+    default_visibility = ["//visibility:public"],
     licenses = ["notice"],
 )
 
diff '--color=auto' -ru a/xla/service/cpu/BUILD b/xla/service/cpu/BUILD
--- a/xla/service/cpu/BUILD	2023-06-12 20:50:10.000000000 +0000
+++ b/xla/service/cpu/BUILD	2023-07-10 14:56:23.459895361 +0000
@@ -559,6 +559,7 @@
         "@tsl//tsl/platform:env",
         "@tsl//tsl/platform:logging",
     ],
+    visibility = ["//visibility:public"],
 )
 
 cc_library(
diff '--color=auto' -ru a/xla/service/gpu/BUILD b/xla/service/gpu/BUILD
--- a/xla/service/gpu/BUILD	2023-06-12 20:50:10.000000000 +0000
+++ b/xla/service/gpu/BUILD	2023-07-10 15:28:03.306876220 +0000
@@ -30,7 +30,7 @@
 
 package(
     # copybara:uncomment default_applicable_licenses = ["//tensorflow:license"],
-    default_visibility = [":friends"],
+    default_visibility = ["//visibility:public"],
     licenses = ["notice"],
 )
 
