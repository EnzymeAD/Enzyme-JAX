name: Build Enzyme-JAX

on:
  push:
    branches:
      - main
    paths:
      - ".github/scripts/process_benchmark_results.py"
      - ".github/workflows/build.yml"
      - "**/BUILD"
      - "**/WORKSPACE"
      - "**/*.bzl"
      - "builddeps/**"
      - "patches/**"
      - "src/**"
      - "test/**"
      - "third_party/**"
  pull_request:
    branches:
      - main
    paths:
      - ".github/scripts/process_benchmark_results.py"
      - ".github/workflows/build.yml"
      - "**/BUILD"
      - "**/WORKSPACE"
      - "**/*.bzl"
      - "builddeps/**"
      - "patches/**"
      - "src/**"
      - "test/**"
      - "third_party/**"

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  build:
    name: Build - ${{ matrix.os }} - python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}

    container:
      image: ${{ (contains(matrix.os, 'linux') && 'ghcr.io/enzymead/reactant-docker-images@sha256:7004a6ebbdd77bd047900b2bffc542e8576864056dc27a9c94d30666d6f7ea01' ) || '' }}

    # container:
    #   image: us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build:latest

    # container:
    #   image: ${{ (contains(matrix.runner, 'a100') && 'us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build-cuda12.8-cudnn9.8:latest') ||
    #            (contains(matrix.runner, 'linux-x86') && 'us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build:latest') ||
    #            (contains(matrix.runner, 'linux-arm64') && 'us-docker.pkg.dev/ml-oss-artifacts-published/ml-public-container/ml-build-arm64:latest') }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - linux-x86-n2-32
          - linux-arm64-c4a-32
          - linux-x86-ct6e-180-4tpu
          - linux-x86-a2-48-a100-4gpu
          - macOS-latest
        python:
          - "3.11"
    env:
      HERMETIC_PYTHON_VERSION: ${{ matrix.python }}
    steps:
      - name: Check GPUs
        if: ${{ contains(matrix.os, 'a100') }}
        run: |
          nvidia-smi
      - name: Set BAZEL_FLAGS
        shell: bash
        run: |
          set -e
          BAZEL_FLAGS=""
          if [ ${{ runner.os }} == macOS ]; then
             BAZEL_FLAGS="${BAZEL_FLAGS} --define using_clang=true"
          fi
          if [ ${{ runner.arch }} == ARM64 ] && [ ${{ runner.os }} == Linux ]; then
              BAZEL_FLAGS="${BAZEL_FLAGS} --linkopt=-fuse-ld=lld"
          fi

          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_TOPOLOGY"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_WORKER_ID"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_SKIP_MDS_QUERY=true"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_TOPOLOGY_WRAP"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_CHIPS_PER_HOST_BOUNDS"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_ACCELERATOR_TYPE"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_RUNTIME_METRICS_PORTS"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_TOPOLOGY_ALT"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_HOST_BOUNDS"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=TPU_WORKER_HOSTNAMES"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=CHIPS_PER_HOST_BOUNDS"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=HOST_BOUNDS"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=ALT=false"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=WRAP"
          BAZEL_FLAGS="${BAZEL_FLAGS} --test_env=VBAR_CONTROL_SERVICE_URL"
          echo "BAZEL_FLAGS=${BAZEL_FLAGS}" >> "${GITHUB_ENV}"
      - uses: actions/checkout@v4
      - uses: bazel-contrib/setup-bazel@0.15.0
        name: Set up Bazel
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}-${{ matrix.os }}-${{ matrix.python }}
          # Share repository cache between workflows.
          repository-cache: true
          bazelisk-version: 1.x
      - name: Update TPU
        if: ${{ contains(matrix.os, 'tpu') }}
        run: |
          env
          sed -i.bak0 "s/cuda12/tpu/g" builddeps/test-requirements.txt
          sed -i.bak0 "s/pypi_jax_cuda12_plugin/pypi_libtpu/g" test/BUILD
      - name: Only test CUDA on GPU
        if: ${{ !contains(matrix.os, 'a100') }}
        run: |
          sed -i.bak0 "/cuda12/d" builddeps/test-requirements.txt
      - name: Build enzymexlamlir-opt
        timeout-minutes: 180
        run: |
          bazel build $BAZEL_FLAGS --color=yes //:enzymexlamlir-opt --test_output=errors
      - name: Upload enzymexlamlir-opt
        uses: actions/upload-artifact@v4
        with:
          name: enzymexlamlir-opt-${{ matrix.os }}-${{ matrix.python }}
          path: "bazel-bin/enzymexlamlir-opt"
          retention-days: 90
      - name: Update Python requirements files
        run: |
          bazel run $BAZEL_FLAGS --color=yes //builddeps:requirements.update
      - name: Build wheel
        timeout-minutes: 240
        run: |
          bazel build $BAZEL_FLAGS --color=yes :wheel --test_output=errors
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        if: ${{ !endsWith(matrix.os, 'arm') }}
        with:
          name: Enzyme-JAX-Wheel-${{ matrix.os }}-${{ matrix.python }}
          path: "bazel-bin/*.whl"
          retention-days: 90
      - name: Run lit tests
        run: |
          bazel test $BAZEL_FLAGS --color=yes --test_output=errors --experimental_ui_max_stdouterr_bytes=-1 --test_verbose_timeout_warnings //test/lit_tests/...
      - name: Run tests
        run: |
          bazel test $BAZEL_FLAGS --color=yes --test_output=errors --experimental_ui_max_stdouterr_bytes=-1 --test_verbose_timeout_warnings //test/...
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: Enzyme-JAX-tests-${{ matrix.os }}-${{ matrix.python }}
          path: |
            bazel-out/**/test.log
          retention-days: 90
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: Enzyme-JAX-benchmark-${{ matrix.os }}-${{ matrix.python }}
          path: |
            bazel-testlogs/test/**/test.outputs/*.zip
          retention-days: 90

  benchmark-summary:
    name: Benchmark Summary
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !cancelled() }}
    permissions:
      contents: write # contents permission to update benchmark contents in gh-pages branch
      statuses: read
      deployments: write # deployments permission to deploy GitHub pages website
      pull-requests: write
    steps:
      - name: Install Dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
      - uses: actions/checkout@v5
      - name: Download all benchmark artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Enzyme-JAX-benchmark-*
          path: benchmark-results
          merge-multiple: false
      - name: Extract and combine benchmark results
        run: |
          uv run --no-project .github/scripts/process_benchmark_results.py \
            --artifact_dir=benchmark-results \
            --csv_file=combined_results.csv \
            --json_file=combined_results.json
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: Enzyme-JAX-combined-benchmark-results
          path: |
            combined_results.csv
            combined_results.json
          retention-days: 90
      - name: Cache and upload benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: EnzymeJAX Benchmarks
          tool: "customSmallerIsBetter"
          output-file-path: combined_results.json
          benchmark-data-dir-path: "benchmarks"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-always: true
          summary-always: true
          alert-threshold: "150%"
          fail-on-alert: false
          # XXX: re-enable before merging
          # auto-push: ${{ github.event_name != 'pull_request' }}
          auto-push: true
          max-items-in-chart: 50
