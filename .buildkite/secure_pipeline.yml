steps:
  - name: "Tag {{matrix.arch}} -- {{matrix.os}}"
    matrix:
      setup:
        arch:
          - aarch64
          - x86_64
        os:
          - macos
        python:
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    agents:
      queue: "juliaecosystem"
      os: "{{matrix.os}}"
      arch: "{{matrix.arch}}"
    env:
      BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET: ${BUILDKITE_PLUGIN_CRYPTIC_BASE64_SIGNED_JOB_ID_SECRET?}
      TWINE_USERNAME: __token__
    plugins:
      - staticfloat/cryptic:
          variables:
            - TWINE_PASSWORD="U2FsdGVkX1+klgFCAUlH1ht3/MyFLbgbao5zmd6LgTqoA4nIJAJ8Wqug/XhdblOv42lyBEAn6+13KDwI5HtLWmExE3VKh1szyzmv+jS9VjpnIpH9aZucbyhVci4QC0RoMkKevJOK2GTyRDDAchYOjpaMkv4pFYdcHPq2VyMMC1PpCiHOx3R6m4LbFPxngJgyOj//YhFT2+rzNoncrxWoJ4clFfC8hpkgQR0mEMAMRTkVfgY6sODbKLW7jtcu8jkE3nf2/kyEMwbt9w1e6ci3pNsdQO67PYlgbnGLX8dIzCpw5s6Eap2GTCvI3iL1+uLZ"
    if: build.tag != null
    commands: |
      mkdir -p .local/bin
      export PATH="`pwd`/.local/bin:`pwd`/conda/bin:\$PATH"
      echo "openssl md5 | cut -d' ' -f2" > .local/bin/md5
      chmod +x .local/bin/md5

      if [ "{{matrix.os}}" == "macos" ]; then
        if [ "{{matrix.arch}}" == "aarch64" ]; then
          sed -i.bak 's~targets = \[.*\]~targets = \[\"AArch64\", \"AMDGPU\"]~g' WORKSPACE
          curl -fLO https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-MacOSX-arm64.sh
        else
          sed -i.bak 's~targets = \[.*\]~targets = \[\"X86\", \"AMDGPU\"]~g' WORKSPACE
          curl -fLO https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-MacOSX-{{matrix.arch}}.sh
        fi
        curl -fLO "https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-darwin"
        mv bazelisk-darwin .local/bin/bazel
        chmod +x .local/bin/bazel
        chmod +x Miniconda*.sh
        ./Miniconda*.sh -b -p `pwd`/conda
        rm Miniconda*.sh
      elif [ "{{matrix.os}}" == "linux" ]; then      
        if [ "{{matrix.arch}}" == "aarch64" ]; then
          curl -fLO https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-arm64
        else
          curl -fLO https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-linux-amd64
        fi
        mv bazel* .local/bin/bazel
        chmod +x .local/bin/bazel
        wget https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-Linux-{{matrix.arch}}.sh
        chmod +x Miniconda*.sh
        ./Miniconda*.sh -b -p `pwd`/conda
        rm Miniconda*.sh
      else
        wget https://repo.anaconda.com/miniconda/Miniconda3-py310_23.3.1-0-Windows-{{matrix.arch}}.exe
        if [ "{{matrix.arch}}" == "aarch64" ]; then
          wget https://github.com/bazelbuild/bazel/releases/download/6.2.1/bazel-6.2.1-windows-arm64.exe
        else
          wget https://github.com/bazelbuild/bazel/releases/download/6.2.1/bazel-6.2.1-windows-x86_64.exe
        fi
        mv bazel* .local/bin/bazel.exe
      fi
      python -m ensurepip --upgrade
      python -m pip install --user numpy wheel
      mkdir baztmp
      export TAG=`echo $BUILDKITE_TAG | cut -c2-`
      sed -i.bak "s~version = \"[0-9.]*\"~version = \"\$TAG\"~g" BUILD
      HERMETIC_PYTHON_VERSION={{matrix.python}} bazel --output_user_root=`pwd`/baztmp build --define=no_nccl_support=true :enzyme_ad
      cp bazel-bin/*.whl .
      python -m pip install *.whl
      python -m pip install --user twine
      python -m twine upload *.whl
    artifact_paths:
      - "*.whl"

    timeout_in_minutes: 180
